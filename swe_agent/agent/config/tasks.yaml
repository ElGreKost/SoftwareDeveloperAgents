planner_task:
    description: |
      We're currently analyzing the following issue within our repository. 
      Here's the issue text:
        ISSUE: {issue}
        REPO: {repo}
        The error filepath is this: {gold_file_path} and THIS IS WHERE THE EDIT IN THE CODEBASE SHOULD HAPPEN so examine thoroughly.

      Understand the GitHub Issue and create a list of files that could be useful for the editor to examine and 
      solve the issue according to issue, issue_hing, error filepath.

      Don't try to clone the repository.
      The repo is already cloned and your current working directory is above the
      repo with absolute path: {repo_parent}
      The first thing you should do is change the current working directory to the main directory of the repository so to {repo_name}

      Now, you're going solve the issue and guide a Code Editor to make changes to the code until you're 
      satisfied with all of the changes he's made. Then you can submit these changes to the code base by 
      simply running the submit command.

    expected_output:
      Your response should contain the that after thorough analysis of the issue the editor needs to further examine,
      also for every file a small description on what is the reason this file could be problematic. 
      Furthermore give instructions on the next steps of hte editor agent my telling him how to examine the files.
    agent: planner

editor_task:
    description: |
      We're currently solving the following issue within our repository. 
      Here's the issue text:
        ISSUE: {issue}
        REPO: {repo}
        the ERROR FILE WHERE the EDIT SHOULD HAPPEN is: {gold_file_path}
      
      Your task is to examine the files returned by the planner and examine them to find out the improvements that 
      have to be done so that the issue is resolved and a Pull Request can be created for this repository.

      # Tool Specifications.
      When you do the edit you are about to generate the patch with FILETOOL_GIT_PATCH make sure that you are in the
      repository root folder because you need to be in the same working directory with the .git file.
      So you have to change the working directory first to {repo} then call the FILETOOL_GIT_PATCH

      ### Tool Documentation so that you can use it with certainty
      Tool Name: FILETOOL_GIT_PATCH
      Tool Arguments: {{'file_manager_id': {{'description': 'ID of the file manager where the file will be opened, if not provided the recent file manager will be used to execute the action. Please provide a value of type string.', 'type': 'str'}}, 'new_file_paths': {{'description': 'Paths of the files newly created to be included in the patch.', 'type': 'list[str]'}}}}
      Tool Description: Get The Patch From The Current Working Directory.
      This Action Generates A Git Patch That Includes All Changes In The Current Working Directory, Including Newly Created Files Specified In The Request.
      The Patch Is In The Format Of A Proper Diff And Includes Deleted Files By Default.
      Usage Example: New File Paths: ["Path/To/New/File1.Txt", "Path/To/New/File2.Py"]
      The Resulting Patch Will Be In The Format:
        Diff
        Git A/Repo/Example.Py
        B/Repo/Example.Py
        Index 1234567..89Abcde 100644
        A/Repo/Example.Py
        +++ B/Repo/Example.Py
        @@  1 +1 @@
        Hello, World!
        +Hello, Composio!
      Note: This Action Should Be Run After All Changes Are Made To Add And Check The Result.

    expected_output:
      First a list of changes the model did to the files, then the patch generated using the patch generation tool.
    agent: editor